nova-api服务:

class ServersController:  [path: nova/api/openstack/compute/plugins/v3/servers.py]
    [attribute]
        extension_info = kwargs.pop('extension_info')
        compute_api    = class API(skip_policy_check=True)  nova/compute/api.py:API

        [stevedore python包： 根据setup.cfg配置文件，初始化一个stevedore.enabled.EnabledExtensionManager对象
            根据参数namespace,找到setup.cfg对应的配置信息，加载对应的插件(即使对应的方法，有很多对象，之后会使用map方法，
            每个对象调用其响应的方法，比如每个对象都调用server_create方法)]
    
        create_extension_manager        --> 使用时，会使用插件对象中的server_create方法               
        rebuild_extension_manager       --> 使用时，会使用插件对象中的server_build方法
        update_extension_manager        --> 使用时，会使用插件对象中的server_update方法
        resize_extension_manager        --> 使用时，会使用插件对象中的server_resize方法


        create_schema_manager           --> 使用时，会使用插件对象中的get_server_create_schema方法, 并把结果
                                        添加到schema_servers.base_create(字典)的properties属性中
        update_schema_manager           --> 使用时，会使用插件对象中的get_server_update_schema方法, 并把结果
                                        添加到schema_servers.base_update(字典)的properties属性中
        rebuild_schema_manager          --> 使用时，会使用插件对象中的get_server_rebuild_schema方法, 并把结果
                                        添加到schema_servers.base_rebuild(字典)的properties属性中
        resize_schema_manager           --> 使用时，会使用插件对象中的get_server_resize_schema方法, 并把结果
                                        添加到schema_servers.base_resize(字典)的properties属性中
        
    [function]
        create
        update
        index
        delete  
        detail

    create流程：
        1 初始化创建参数create_kwargs: _create_extension_point
             1) create_kwargs["access_ip_v4"] = "accessIPv4"
             2) create_kwargs["availability_zone"] = server_dict["availability_zone"]                
              
             3) create_kwargs["block_device_mapping"] = block_device_mapping
                  create_kwargs["legacy_bdm"] = False           
                    block_device_mapping = block_device.BlockDeviceDict.from_api(bdm_dict, image_uuid_specified)
                            bdm_dict = server_dict["block_device_mapping_v2"] 中的值
                            image_uuid_specified = server_dict['imageRef']               

             4) create_kwargs["block_device_mapping_v1"] = server_dict["block_device_mapping"]
                create_kwargs["legacy_bdm"] = True
                                       
             5) create_kwargs["config_drive"] = server_dict["config_drive"]
                create_kwargs["auto_disk_config"]  = if server_dict[“OS-DCF:diskConfig”] == "AUTO" return True
                                                                                     == "MANUAL" return False            
             6) create_kwargs['key_name'] = server_dict['key_name']
                create_kwargs["auto_disk_config"]
                create_kwargs["auto_disk_config"]
        
             7) create_kwargs['min_count'] = server_dict['min_count']
                create_kwargs['max_count'] = server_dict['max_count']
                create_kwargs['return_reservation_id'] = server_dict['return_reservation_id']
                  
             8) create_kwargs['injected_files'] = server_dict['personality']

             9) if 'os:scheduler_hints' in req_body:
                   create_kwargs['scheduler_hints'] = server_dict['os:scheduler_hints']
                elif 'OS-SCH-HNT:scheduler_hints' in req_body:
                   create_kwargs['scheduler_hints'] = server_dict['OS-SCH-HNT:scheduler_hints'] 
            10) create_kwargs['security_group'] => server_dict['security_groups']    
            
            11) create_kwargs['user_data'] = server_dict['user_data']    

        target = {'project_id': project_id, 'user_id': user_id, 'availability_zone': availability_zone}
        2 availability_zone
            authorize(context, target, 'create')
        
        3 block_device_mapping
            authorize(context, target, 'create:attach_volume')
        4 获取image的uuid
            根据server_dict['imageRef']生成uuid
        5 requested_networks:
            requested_networks = [
                        {"address": server_dict['networks']['fixed_ip'], "port_id": server_dict['networks']['port'], 
                         'network_id': server_dict['networks']['uuid']}]

            authorize(context, target, 'create:attach_network')
        6 获取flavors信息：
            这个应该是查询数据库，但是需要详细分析
            objects.Flavor.get_by_flavor_id(ctxt, flavorid, read_deleted)
                flavorid = server_dict['flavorRef']   read_deleted="no"

        7 执行instance创建
            API.create(inst_type, image_uuid, display_name, display_description, metadata=server_dict['metadata'], 
                        admin_password, requested_networks, check_server_group_quota=True, create_kwargs)
                --> API._create_instance（）

class API:  [path: nova/compute/api.py]
    [attribute]
        image_api           = image.API()  [path: nova/image/api.py]
        network_api         = network.API() [path: nova/network/neutronv2/api.py]
        volume_api          = volume.API() [path: nova/volume/cinder.py]    
        security_group_api  = ...
        consoleauth_rpcapi  =  consoleauth.ConsoleAuthAPI() [path: nova/consoleauth/rpcapi.py]
                                    target = oslo_messaging.target(topic='consoleauth', version='2.1')
                                    rpc.get_client(target, ...) 
        compute_rpcapi      =  compute_rpcapi.ComputeAPI()  [path: nova/compute/rpcapi.py]
                                    target = oslo_messaging.target(topic='compute_topic', version='2.1')
                                    rpc.get_client(target, ...) 
                                    
        _compute_task_api   =  ComputeTaskAPI()   [path: nova/conductor/api.py] 
                                    self.conductor_compute_rpcapi = rpcapi.ComputeTaskAPI()                                 
                                        target = oslo_messaging.target(topic='conductor', namespace='compute_task',
                                                                         version='2.1')
                                        rpc.get_client(target, ...) 
                                        
        servicegroup_api    =  servicegroup.API()
                                _driver_name_class_mapping = ['db', 'zookeeper', 'memcache'] 
                                _driver = _driver_name_class_mapping()
        notifier            =  rpc.get_notifier('compute', CONF.host)
        key_manager         = ConfKeyManager()  [path: nova/keymgr/conf_key_mgr.py]
        db                  = db() [path: nova/db/__ini__.py]

    [function]
        _create_instance
            1) 获取image信息[image_id, boot_meta]
                通过image_api获取image信息;实例化一个GlanceImageService对象，并调用相应的show方法，查询image
            2) 策略校验
                nova.policy.enforce(context, "compute:create:forced_host", ())
            3) 生成base_option (_validate_and_build_base_options):
                1 获取kernel_id 和 ramdisk_id
                    从boot_meta中的properties中获取kernel_id和ramdisk_id，并通过image_api查询具体信息
                2 生成device的路径
                3 numa_topology
                    objects.InstanceNUMATopology(cells=cells)
                4 获取pci信息 pci_request_info
                    objects.InstancePCIRequests(requests=pci_requests)
                5 组装base_option (这个很重要)
            4) 创建instance_group
                从参数scheduler_hints中获取group参数，调用
                objects.InstanceGroup.get_by_uuid(context, group_hint)
            5) instance数据库创建数据项: _provision_instances
                实例化objects.Instance对象
                添加instance数据库信息 create_db_entry_for_new_instance
                
                向InstanceGroup添加成员  objects.InstanceGroup.add_members
            6) objects.InstanceAction.action_start
            7) compute_task_api.build_instances  通知其他服务，部署虚拟机

class ComputeTaskAPI    [path: nova/conductor/api.py]
    [attribute]
        conductor_compute_rpcapi = rpcapi.ComputeTaskAPI()

    [function]
        build_instances:
            conductor_compute_rpcapi.build_instances

class ComputeTaskAPI    [path: nova/conductor/rpcapi.py]
    [attribute]
        target = oslo_messaging.target(topic='conductor', namespace='compute_task',
                                         version='2.1')
        rpc.get_client(target, ...) 
                        
    [function]
        build_instances:
            1 组装参数kw:
                {'instances': , 'image': , 'filter_properties': , 'admin_password': , 'injected_files': ,
                 'requested_network': , 'security_groups': , 'block_device_mapping': , 'legacy_bdm': }
            2 向conducotr发送rpc cast请求, topic = conductor 方法是build_instances 参数是kw   

---------------------------------------------------------------------------------------------------------------
nova-conductor服务：  

nova相关服务启动流程：     [use_local, topic, manager可以在配置文件中查找，conductor/api.py中设置了默认配置
                          use_local: False, topic: conductor, manager: nova.conductor.manager.ConductorManager]
    class Service   [path: nova/service.py]
        [attribute]
            self.host =  host
            self.binary = binary    
            self.topic = topic     
            self.servicegroup_api = servicegroup.API(db_allowed=db_allowed)  [path: nova/servicegroup/api.py]
            self.manager_class =  manager  
            self.manager = manager_class(host=self.host, *args, **kwargs) [其实就是对应的ConductorManager]
            self.conductor_api = conductor.API(use_local=db_allowed)  [path: nova/conductor/api.py]
                                 这个里面需要说明：use_local如果为真，对应conductor_api.LocalAPI [path: nova/conductor/api.py]
                                                如果为假,对应conductor_api.API [path: nova/conductor/api.py 继承的LocalAPI]

        [function]
            create:
                host: 如果没有传参数，则从配置文件中读取host项
                binary: 如果没有传参数，则获取命令行参数第一个参数
                topic: 如果没有传参数，则根据binary,把binary截掉nova-部分，剩下的部分就是topic
                manager: 实例化一个对象；类名：同topic一样，截掉nova-部分，剩下的部分在衔接_mananger, 找到对应的类名
                
                实例化一个service_obj对象
            
            start:
                1) DB中添加服务的记录   _create_service_ref
                    这里面调用conductor_api对象的_manager调用service_create方法
                    _manager这个很有特点，对应utils.ExceptionHelper()对象 这个很有意思
                2) manager.pre_start_hook 
                    服务初始化后，在rpc server建立之间，需要做的事情
                3）建立该服务的rpc server
                    rpcserver = rpc.get_server(target, endpoints, serializer) 
                    rpcserver.start()
                
                    serializer: objects_base.NovaObjectSerializer
                    target: topic='conductor' server=self.host

                    endpoints: [
                                 ConductorManager, 
                                 ConductorManager.additional_endpoints, 
                                ]
                    
                    该服务接收到其他服务的rpc请求后，会在对应的Manager对象（endpoints里面中记录的对象）中查找对应的方法    
                4) manager.post_start_hook
                5) servicegroup添加成员
                    servicegroup_api.join(host, topic, self)
                6) 如果preiodic使能，执行threadgroup add_dynamic_timer


class ConductorManager:
    [attribute]
        self.notifier = rpc.get_notifier("conductor", self.host)
        self.security_group_api = openstack_driver.get_openstack_security_group_driver()
        self._network_api = network.API()               [path: nova/network/neutronv2/api.py]
        self._compute_api = compute_api.API()           [path: nova/compute/api.py]
        self.compute_task_mgr = ComputeTaskManager()    [path: nova/conductro/manager.py]
        self.cells_rpcapi = cells_rpcapi.CellsAPI()     [path: nova/cells/rpcapi.py]
        sell.additional_endpoints.append(self.compute_task_mgr)
        
    [function]
        ConductorManager中大部分操作跟DB相关，而响应nova-api的rpc操作的方法，应该都是ComputeTaskManager方法

class ComputeTaskManager:
    [attribute]
        self.compute_rpcapi = compute_rpcapi.ComputeAPI()       [path: nova/compute/rpcapi.py]
        self.image_api = image.API()                            [path: nova/image/api.py]
        self.scheduler_client = scheduler_client.SchedulerClient()  [path: nova/scheduler/client/__init__.py]
        
    [function]
        build_instances:
            1）构建请求信息request_spec
                scheduler_utils.build_request_spec
            2) 获取网络配置
                requested_networks = objects.NetworkRequestList
            3) 获取flavor信息并向scheduler服务发送请求，获取可以部署的节点
                1 flavor = objects.Flavor.get_by_id()
                2 SchedulerClient.select_destinations()         #向schduler发送select_destination请求，使用的是call方法
            4) 获取磁盘信息，并向compute服务发送请求，部署虚拟机     
                1 objects.BlockDeviceMappingList.get_by_instance_uuid(）
                2 ComputeAPI.build_and_run_instance（）          #向compute发送build_and_run_instance请求，使用的是cast方法 

class SchedulerClient:
    [attrubute]
        self.queryclient = SchedulerQueryClient()       [path: nova/scheduler/client/query.py]
        slef.reportclient = SchedulerReportClient()     [path: nova/scheduler/client/report.py]

    [function]
        大多数方法都是使用queryclient或者reportclient对应的方法

class SchedulerQueryClient:
    [attribute]
        self.scheduler_rpcapi = scheduler_rpcapi.SchedulerAPI()

    [function]
        大多数方法都是使用SchedulerAPI对应的方法

class SchdulerReportClient:
    只有一个方法：update_resource_status
    
class SchdulerAPI:
    [attribute]
        定义到scheduler服务的rpc 客户端
        target:  topic="schduler" version='4.0'
        version_cap:        serializer:
        定义rpc.get_client(target, version_cap, serializer)

    [function]  
        定义的方法就是向schduler服务发送rpc请求

class ComputeAPI:
    [attribute]
        定义了向compute服务发送rpc请求的client
        target: topic='compute', version='4.0'
        version_cap:
        serializer:
        client = rpc.get_client(target, version_cap, serializer)
 
    [function]
        定义的方法就是向compute服务发送rpc请求

----------------------------------------------------------------------------------------------------
nova-scheduler服务:
    也是server流程启动，但是没有传manager, manager对应的类需要查找配置文件；配置项在nova/service.py中，scheduler_manager
    对应的是nova.scheduler.manager.SchedulerManager

class SchedulerManager:
    [attribute]
        self.driver = FilterScheduler        [path: nova/scheduler/filter_scheduler.py]
        self.notifier = rpc.get_notifier('scheduler', self.host)
        self.addtional_endpoints.append      _SchedulerManagerV3Proxy
    [function]
        大多数的方法使用driver和driver.host_manager中的方法

class FilterScheduler:
    [attribute]
        self.host_manager = HostManager()           [path: nova/scheduler/host_manager.py]
        self.servicegroup_api = API()               [path: nova/servicegroup/api.py]
        self.options = scheduler_options.SchedulerOptions()
        self.notifier = rpc.get_notifier('scheduler')
    [function]
        最关键的就是select_destinations方法，也是conductor服务发送scheduler服务的rpc请求
        select_destination:
            1) 发送notifier请求：
                notifier.info(context, 'scheduler.select_destinations.start', dict(request_spec=request_spec))
            2) 调用_scheduler方法
            3) 发送notifier请求:
                notifier.info(context, 'scheduler.select_destinations.end', dict(request_spec=request_spec))

        _scheduler:
            1) 设置request_spec和filter_properties
            2) 获取所有物理节点状态
                    host_manager.get_all_host_status()
            3) 为每个虚拟机选择部署节点
                1 通过filter_properties选择节点
                   hosts = host_manager.get_filtered_hosts(hosts, filter_properties, index=num)
                2 为每个节点设置权重，并根据权重，对节点进行排序
                   weighed_hosts = host_manager.get_weighed_hosts(hosts, filter_properties)
                3 从weighed_hosts中选举前几个节点(数目即是从配置文件schduler_host_subset_size)，
                    并从这些节点中，随机选出一个节点作为部署该虚拟机的节点

class HostManager:                      [path: nova/scheduler/host_manager.py]
    [attribute]
        self.host_state_map = {}
        self.filter_handler = filters.HostFilterHandler()
        self.filter_cls_map = [class all_filters]   [path: nova/scheduler/filters.py]  
        self.filter_obj_map = {}
        self.default_filters = self._choose_host_filters(self._load_filters())
                    [ 设置scheduler的filter类，默认是 RetryFilter，AvailabilityZoneFilter，RamFilter，ComputeFilter，
                      ComputeCapabilitiesFilter， ImagePropertiesFilter， ServerGroupAntiAffinityFilter，
                      ServerGroupAffinityFilter  这些都是scheduler时过滤host用的]
        self.weight_handler = weights.HostWeightHandler()
        self.weighers = [class all_weighters]       [path: nova/scheduler/weights/__init__.py]

        self.aggs_by_id = objects.AggregateList
        self.host_aggregates_map = collections.defaultdict(set)  {agg.host: agg.id}
        self.instance_info 
        
    [function]



